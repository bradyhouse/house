Ext.define("Ext.pivot.filter.Label",{alternateClassName:["Mz.aggregate.filter.Label"],extend:"Ext.pivot.filter.Base",alias:"pivotfilter.label",isMatch:function(c){var b=this,a;if(b.operator=="begins"){return Ext.String.startsWith(String(c||""),String(b.value||""),!b.caseSensitive)}if(b.operator=="not begins"){return !Ext.String.startsWith(String(c||""),String(b.value||""),!b.caseSensitive)}if(b.operator=="ends"){return Ext.String.endsWith(String(c||""),String(b.value||""),!b.caseSensitive)}if(b.operator=="not ends"){return !Ext.String.endsWith(String(c||""),String(b.value||""),!b.caseSensitive)}if(b.operator=="contains"){return b.stringContains(String(c||""),String(b.value||""),!b.caseSensitive)}if(b.operator=="not contains"){return !b.stringContains(String(c||""),String(b.value||""),!b.caseSensitive)}if(b.operator=="in"){return b.foundInArray(b.value)}if(b.operator=="not in"){return !b.foundInArray(b.value)}return b.callParent(arguments)},foundInArray:function(d){var b=Ext.Array.from(this.value),a=b.length,e=false,c;if(this.caseSensitive){return Ext.Array.indexOf(b,d)>=0}else{for(c=0;c<a;c++){e=e||(String(d).toLowerCase()==String(b[c]).toLowerCase());if(e){break}}return e}},stringContains:function(c,d,b){var a=(d.length<=c.length);if(a){if(b){c=c.toLowerCase();d=d.toLowerCase()}a=(c.lastIndexOf(d)>=0)}return a}});