Ext.define("Ext.pivot.plugin.Configurator",{alternateClassName:["Mz.pivot.plugin.Configurator"],extend:"Ext.AbstractPlugin",requires:["Ext.util.DelayedTask","Ext.menu.Menu","Ext.menu.CheckItem","Ext.pivot.plugin.configurator.Panel"],alias:["plugin.pivotconfigurator","plugin.mzconfigurator"],fields:[],refreshDelay:300,dock:"right",collapsible:true,lockableScope:"top",init:function(a){var b=this;if(!a.isPivotGrid){Ext.raise("This plugin is only compatible with Ext.pivot.Grid")}b.pivot=a;b.fields=Ext.Array.from(b.fields);b.pivotListeners=b.pivot.on({beforerender:b.onBeforeGridRendered,afterrender:b.onAfterGridRendered,single:true,scope:b,destroyable:true});b.callParent(arguments)},destroy:function(){var a=this;Ext.destroyMembers(a,"configCt","pivotListeners");a.pivot=a.fields=a.pivotListeners=a.configCt=null;a.callParent(arguments)},enable:function(){var a=this;a.disabled=false;if(a.configCt){a.configCt.enable()}a.pivot.fireEvent("showconfigpanel",a.configCt)},disable:function(){var a=this;a.disabled=true;if(a.configCt){a.configCt.disable()}a.pivot.fireEvent("hideconfigpanel",a.configCt)},onBeforeGridRendered:function(){this.setDock(this.dock)},onAfterGridRendered:function(){if(this.disabled===true){this.disable()}else{this.enable()}},setDock:function(a){var c=this,b=Ext.isDefined(c.configCt);Ext.destroy(c.configCt);c.configCt=c.pivot.addDocked({xtype:"pivotconfigpanel",dock:a||c.dock,grid:c.pivot,fields:c.fields,refreshDelay:c.refreshDelay,collapsible:c.collapsible})[0];if(b){c.configCt.initPivotFields()}}});