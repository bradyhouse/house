Ext.define("Ext.pivot.filter.Base",{alternateClassName:["Mz.aggregate.filter.Abstract"],alias:"pivotfilter.base",mixins:["Ext.mixin.Factoryable"],operator:null,value:null,caseSensitive:true,parent:null,constructor:function(a){Ext.apply(this,a||{});return this.callParent(arguments)},destroy:function(){this.parent=null;return this.callParent(arguments)},serialize:function(){var a=this;return Ext.apply({type:a.type,operator:a.operator,value:a.value,caseSensitive:a.caseSensitive},a.getSerialArgs()||{})},getSerialArgs:Ext.emptyFn,isMatch:function(e){var b=this,i=Ext.pivot.matrix.Base.prototype.naturalSort,f=b.value,a,h,g,d,c;f=(Ext.isArray(f)?f[0]:f)||"";a=(b.caseSensitive?i(e||"",f):i(String(e||"").toLowerCase(),String(f).toLowerCase()));if(b.operator=="="){return(a===0)}if(b.operator=="!="){return(a!==0)}if(b.operator==">"){return(a>0)}if(b.operator==">="){return(a>=0)}if(b.operator=="<"){return(a<0)}if(b.operator=="<="){return(a<=0)}f=b.value;d=(Ext.isArray(f)?f[0]:f)||"";c=(Ext.isArray(f)?f[1]:f)||"";h=(b.caseSensitive?i(String(e||"").toLowerCase(),String(d).toLowerCase()):i(e||"",d));g=(b.caseSensitive?i(String(e||"").toLowerCase(),String(c).toLowerCase()):i(e||"",c));if(b.operator=="between"){return(h>=0&&g<=0)}if(b.operator=="not between"){return !(h>=0&&g<=0)}return true}});