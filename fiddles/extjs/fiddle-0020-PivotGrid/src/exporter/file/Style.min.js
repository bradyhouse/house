Ext.define("Ext.exporter.file.excel.Style",{extend:"Ext.exporter.file.Base",config:{parentId:null,name:null,protection:null,alignment:null,font:null,interior:null,format:null,borders:null},statics:{checks:{alignment:{Horizontal:["Automatic","Left","Center","Right","Fill","Justify","CenterAcrossSelection","Distributed","JustifyDistributed"],Indent:null,ReadingOrder:["LeftToRight","RightToLeft","Context"],Rotate:null,ShrinkToFit:[true,false],Vertical:["Automatic","Top","Bottom","Center","Justify","Distributed","JustifyDistributed"],VerticalText:[true,false],WrapText:[true,false]},font:{Bold:[true,false],CharSet:null,Color:null,FontName:null,Family:["Automatic","Decorative","Modern","Roman","Script","Swiss"],Italic:[true,false],Outline:[true,false],Shadow:[true,false],Size:null,StrikeThrough:[true,false],Underline:["None","Single","Double","SingleAccounting","DoubleAccounting"],VerticalAlign:["None","Subscript","Superscript"]},border:{Position:["Left","Top","Right","Bottom","DiagonalLeft","DiagonalRight"],Color:null,LineStyle:["None","Continuous","Dash","Dot","DashDot","DashDotDot","SlantDashDot","Double"],Weight:[0,1,2,3]},interior:{Color:null,Pattern:["None","Solid","Gray75","Gray50","Gray25","Gray125","Gray0625","HorzStripe","VertStripe","ReverseDiagStripe","DiagStripe","DiagCross","ThickDiagCross","ThinHorzStripe","ThinVertStripe","ThinReverseDiagStripe","ThinDiagStripe","ThinHorzCross","ThinDiagCross"],PatternColor:null},protection:{Protected:[true,false],HideFormula:[true,false]}}},tpl:['       <Style ss:ID="{id}"','<tpl if="this.exists(parentId)"> ss:Parent="{parentId}"</tpl>','<tpl if="this.exists(name)"> ss:Name="{name}"</tpl>',">\n",'<tpl if="this.exists(alignment)">           <Alignment{[this.getAttributes(values.alignment, "alignment")]}/>\n</tpl>','<tpl if="this.exists(borders)">',"           <Borders>\n",'<tpl for="borders">               <Border{[this.getAttributes(values, "border")]}/>\n</tpl>',"           </Borders>\n","</tpl>",'<tpl if="this.exists(font)">           <Font{[this.getAttributes(values.font, "font")]}/>\n</tpl>','<tpl if="this.exists(interior)">           <Interior{[this.getAttributes(values.interior, "interior")]}/>\n</tpl>','<tpl if="this.exists(format)">           <NumberFormat ss:Format="{format}"/>\n</tpl>','<tpl if="this.exists(protection)">           <Protection{[this.getAttributes(values.protection, "protection")]}/>\n</tpl>',"       </Style>\n",{exists:function(a){return !Ext.isEmpty(a)},getAttributes:function(b,e){var h=' ss:{0}="{1}"',a=this.owner.self.checks,j=Ext.Object.getKeys(b||{}),f=j.length,k="",c,d,g;if(a[e]){for(c=0;c<f;c++){g=j[c];d=a[e][g];if(Ext.isEmpty(d)||Ext.Array.indexOf(d,b[g])>=0){k+=Ext.String.format(h,g,Ext.isBoolean(b[g])?Number(b[g]):b[g])}else{Ext.raise(Ext.String.format("Invalid key (%0) or value (%1) provided for Style!",g,b[g]))}}}return k}}]});