"use strict";
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var board_model_1 = require("./board.model");
var utils_common_1 = require("../../common/utils.common");
require("rxjs/add/operator/map");
require("rxjs/add/operator/share");
var BoardService = (function () {
    function BoardService() {
        var _this = this;
        this.database = null;
        this._board = new board_model_1.Board();
        this.boardChange$ = new Observable_1.Observable(function (observer) { return _this._boardObserver = observer; }).share();
    }
    Object.defineProperty(BoardService.prototype, "board", {
        get: function () {
            return this._board;
        },
        set: function (board) {
            if (this._board.toString() !== board.toString()) {
                this._board = board;
                if (this._boardObserver) {
                    this._boardObserver.next(board);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    BoardService.prototype.init = function (stateService, model) {
        if (model === void 0) { model = null; }
        var board = new board_model_1.Board(model.rowCount, model.colCount, model.isSolved, model.sequence, model.expectedSequence);
        if (stateService && stateService.databaseService) {
            this.database = stateService.databaseService;
        }
        if (model) {
            board.squares = this.transform(model);
            this.board = board;
        }
    };
    BoardService.prototype.sequence = function (model, expect) {
        if (expect === void 0) { expect = false; }
        var min = 1, rows = model ? model.rowCount : null, cols = model ? model.colCount : null, max = rows && cols ? rows * cols : 0, seq = [];
        if (max > 0) {
            if (!expect) {
                seq = utils_common_1.Utils.generateSequence(min, max, max);
            }
            else {
                seq = utils_common_1.Utils.generateSequentialSequence(min, max);
            }
        }
        return seq;
    };
    BoardService.prototype.transform = function (model) {
        var row = 1, i = 1, pos = 0, rows = model.rowCount, cols = model.colCount, isSolved = model.isSolved, seq = model.sequence, expectedSeq = model.expectedSequence, subSeq = [], expectedSubSeq = [], store = [];
        for (; row <= rows; row++) {
            if (isSolved) {
                subSeq = utils_common_1.Utils.parseSubSequence(expectedSeq, pos, cols);
            }
            else {
                subSeq = utils_common_1.Utils.parseSubSequence(seq, pos, cols);
            }
            expectedSubSeq = utils_common_1.Utils.parseSubSequence(expectedSeq, pos, cols);
            store.push({
                index: i - 1,
                isLast: row === rows ? true : false,
                seq: subSeq,
                expectedSeq: expectedSubSeq
            });
            i++;
            pos += cols;
        }
        return this.transformStore(store);
    };
    BoardService.prototype.transformStore = function (store) {
        var _this = this;
        var squares = [];
        store.forEach(function (row) {
            if (row.seq && row.expectedSeq && row.seq.length === row.expectedSeq.length) {
                row.seq.map(function (num, i) {
                    var colClass = utils_common_1.Utils.mapColClass(num), squareValue = i < (row.seq.length - 1) || (i < row.seq.length && !row.isLast) ? num : null, squareIsEmpty = squareValue ? false : true, squareClass = squareValue ? 'btn ' + colClass : 'btn empty', squareExpectedValue = row.expectedSeq[i], squareId = 'row-' + row.index + '-square-' + squareExpectedValue, squareRow = row.index, squareCol = i, squareOptions = _this.isSquarePersisted(squareId) ?
                        _this.restoreSquareOptions(squareId) :
                        {
                            id: squareId,
                            isEmpty: squareIsEmpty,
                            row: squareRow,
                            col: squareCol,
                            value: String(squareValue),
                            expectedValue: String(squareExpectedValue),
                            cssClass: squareClass
                        };
                    _this.persist(squareOptions);
                    squares.push(squareOptions);
                });
            }
        });
        return squares;
    };
    BoardService.prototype.isSquarePersisted = function (id) {
        var databaseService = this.database;
        if (databaseService) {
            return databaseService.exists(id);
        }
        return false;
    };
    BoardService.prototype.restoreSquareOptions = function (id) {
        var databaseService = this.database, squareState = null;
        if (databaseService) {
            squareState = databaseService.pull(id);
        }
        return squareState;
    };
    BoardService.prototype.unPersist = function () {
        var databaseService = this.database;
        if (databaseService) {
            databaseService.zero('row');
        }
    };
    BoardService.prototype.persist = function (options) {
        var databaseService = this.database;
        if (databaseService) {
            databaseService.push(options.id, options);
        }
    };
    return BoardService;
}());
BoardService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], BoardService);
exports.BoardService = BoardService;
//# sourceMappingURL=data:application/json;base64,